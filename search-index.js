var N = null;var searchIndex = {};
searchIndex["rs_poker"]={"doc":"Furry Fiesta is a library for poker. It's mostly meant for Holdem games, however the core functionality should work for all game types.","items":[[0,"core","rs_poker","Allow all the core poker functionality to be used externally. Everything in core should be agnostic to poker style. This is the core module. It exports the non-holdem related code.",N,N],[3,"Card","rs_poker::core","The main struct of this library. This is a carrier for Suit and Value combined.",N,N],[12,"value","","The face value of this card.",0,N],[12,"suit","","The suit of this card.",0,N],[3,"Hand","","Struct to hold cards.",N,N],[3,"CardIter","","Given some cards create sets of possible groups of cards.",N,N],[3,"Deck","","Deck struct that can tell quickly if a card is in the deck",N,N],[3,"FlatDeck","","`FlatDeck` is a deck of cards that allows easy indexing into the cards. It does not provide contains methods.",N,N],[4,"Suit","","Enum for the four different suits. While this has support for ordering it's not sensical. The sorting is only there to allow sorting cards.",N,N],[13,"Spade","","Spades",1,N],[13,"Club","","Clubs",1,N],[13,"Heart","","Hearts",1,N],[13,"Diamond","","Diamonds",1,N],[4,"Value","","Card rank or value. This is basically the face value - 2",N,N],[13,"Two","","2",2,N],[13,"Three","","3",2,N],[13,"Four","","4",2,N],[13,"Five","","5",2,N],[13,"Six","","6",2,N],[13,"Seven","","7",2,N],[13,"Eight","","8",2,N],[13,"Nine","","9",2,N],[13,"Ten","","T",2,N],[13,"Jack","","J",2,N],[13,"Queen","","Q",2,N],[13,"King","","K",2,N],[13,"Ace","","A",2,N],[4,"Rank","","All the different possible hand ranks. For each hand rank the u32 corresponds to the strength of the hand in comparison to others of the same rank.",N,N],[13,"HighCard","","The lowest rank. No matches",3,N],[13,"OnePair","","One Card matches another.",3,N],[13,"TwoPair","","Two diffent pair of matching cards.",3,N],[13,"ThreeOfAKind","","Three of the same value.",3,N],[13,"Straight","","Five cards in a sequence",3,N],[13,"Flush","","Five cards of the same suit",3,N],[13,"FullHouse","","Three of one value and two of another value",3,N],[13,"FourOfAKind","","Four of the same value.",3,N],[13,"StraightFlush","","Five cards in a sequence all for the same suit.",3,N],[11,"from_u8","","Take a u32 and convert it to a value.",2,[[["u8"]],["value"]]],[11,"values","","Get all of the `Value`'s that are possible. This is used to iterate through all possible values when creating a new deck, or generating all possible starting hands.",2,N],[11,"from_char","","Given a character parse that char into a value. Case is ignored as long as the char is in the ascii range (It should be). @returns None if there's no value there.",2,[[["char"]],["option",["value"]]]],[11,"to_char","","Convert this Value to a char.",2,[[["self"]],["char"]]],[11,"gap","","How card ranks seperate the two values.",2,[[["self"],["value"]],["u8"]]],[11,"suits","","Provide all the Suit's that there are.",1,N],[11,"from_u8","","Translate a Suit from a u8. If the u8 is above the expected value then Diamond will be the result.",1,[[["u8"]],["suit"]]],[11,"from_char","","Given a character that represents a suit try and parse that char. If the char can represent a suit return it.",1,[[["char"]],["option",["suit"]]]],[11,"to_char","","This Suit to a character.",1,[[["self"]],["char"]]],[11,"default","","Create the default empty hand.",4,[[],["hand"]]],[11,"new_with_cards","","Create the hand with specific hand.",4,[[["vec",["card"]]],["hand"]]],[11,"new_from_str","","From a str create a new hand.",4,[[["str"]],["result",["hand","string"]]]],[11,"push","","Add card at to the hand. No verification is done at all.",4,[[["self"],["card"]]]],[11,"truncate","","Truncate the hand to the given number of cards.",4,[[["self"],["usize"]]]],[11,"len","","How many cards are in this hand so far ?",4,[[["self"]],["usize"]]],[11,"is_empty","","Are there any cards at all ?",4,[[["self"]],["bool"]]],[11,"iter","","Create an iter on the cards.",4,[[["self"]],["iter",["card"]]]],[11,"new","","Create a new `CardIter` from a slice of cards. `num_cards` represents how many cards should be in the resulting vector.",5,N],[11,"default","","Create the default 52 card deck",6,[[],["deck"]]],[11,"contains","","Given a card, is it in the current deck?",6,[[["self"],["card"]],["bool"]]],[11,"remove","","Given a card remove it from the deck if it is present.",6,[[["self"],["card"]],["bool"]]],[11,"len","","How many cards are there in the deck.",6,[[["self"]],["usize"]]],[11,"is_empty","","Have all of the cards been dealt from this deck?",6,[[["self"]],["bool"]]],[11,"iter","","Get an iterator from this deck",6,[[["self"]],["iter",["card"]]]],[11,"len","","How many cards are there in the deck ?",7,[[["self"]],["usize"]]],[11,"is_empty","","Have all cards been dealt ? This probably won't be used as it's unlikely that someone will deal all 52 cards from a deck.",7,[[["self"]],["bool"]]],[11,"sample","","Give a random sample of the cards still left in the deck",7,[[["self"],["usize"]],["vec",["card"]]]],[11,"shuffle","","Randomly shuffle the flat deck. This will ensure the there's no order to the deck.",7,[[["self"]]]],[11,"deal","","Deal a card if there is one there to deal. None if the deck is empty",7,[[["self"]],["option",["card"]]]],[8,"Flattenable","","Trait that means a deck can be made into a `FlatDeck`",N,N],[10,"flatten","","Consume a `Deck` and produce a deck suitable for random index.",8,[[["self"]],["flatdeck"]]],[8,"Rankable","","Can this turn into a hand rank? There are default implementations for `Hand` and `Vec<Card>`.",N,N],[10,"cards","","Rank the current 5 card hand. This will no cache the value.",9,N],[11,"rank","","Rank the cards to find the best 5 card hand. This will work on 5 cards or more ( specifically on 7 card holdem hands). If you know that the hand only contains 5 cards then `rank_five` will be faster.",9,[[["self"]],["rank"]]],[11,"rank_five","","Rank this hand. It doesn't do any caching so it's left up to the user to understand that duplicate work will be done if this is called more than once.",9,[[["self"]],["rank"]]],[0,"holdem","rs_poker","The holdem specific code. This contains range parsing, game state, and starting hand code.",N,N],[3,"MonteCarloGame","rs_poker::holdem","Current state of a game.",N,N],[3,"RangeParser","","Unit struct to provide starting hand parse functions. Use this to parse things like `RangeParser::parse_one(\"AKo\")` and `RangeParser::parse_one(\"TT+\")`",N,N],[4,"Suitedness","","Enum to represent how the suits of a hand correspond to each other. `Suitedness::Suited` will mean that all cards have the same suit `Suitedness::OffSuit` will mean that all cards have the different suit `Suitedness::Any` makes no promises.",N,N],[13,"Suited","","All of the cards are the same suit",10,N],[13,"OffSuit","","None of the cards are the same suit",10,N],[13,"Any","","No promises about suit.",10,N],[4,"StartingHand","","Enum to represent all the possible ways to specify a starting hand.",N,N],[13,"Def","","Default starting hand type. This means that we specify two cards and their suitedness.",11,N],[13,"SingleCardRange","","A starting hand where the second card is a range.",11,N],[11,"default","","Create a default starting hand with two `Value`'s and a `Suitedness`.",11,[[["value"],["value"],["suitedness"]],["startinghand"]]],[11,"single_range","","Create a new StartingHand with the second card being a range.",11,[[["value"],["value"],["value"],["suitedness"]],["startinghand"]]],[11,"all","","Create every possible unique StartingHand.",11,[[],["vec",["startinghand"]]]],[11,"possible_hands","","From a StartingHand specify all the hands this could represent.",11,[[["self"]],["vec",["hand"]]]],[11,"new_with_hands","","If we already have hands then lets start there.",12,[[["vec",["hand"]]],["result",["montecarlogame","string"]]]],[11,"simulate","","Simulate finishing a holdem game.",12,[[["self"]],["result",["string"]]]],[11,"reset","","Reset the game state.",12,[[["self"]]]],[11,"parse_one","","Parse a string and return all the starting hands",13,[[["str"]],["result",["vec","string"]]]],[11,"from","rs_poker::core","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"into_iter","","",6,[[["self"]],["i"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","rs_poker::holdem","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"flatten","rs_poker::core","Flatten this deck, consuming it to produce a `FlatDeck` that's easier to get random access to.",6,[[["self"]],["flatdeck"]]],[11,"cards","","",4,N],[11,"clone","","",2,[[["self"]],["value"]]],[11,"clone","","",1,[[["self"]],["suit"]]],[11,"clone","","",0,[[["self"]],["card"]]],[11,"clone","","",4,[[["self"]],["hand"]]],[11,"clone","","",3,[[["self"]],["rank"]]],[11,"clone","rs_poker::holdem","",10,[[["self"]],["suitedness"]]],[11,"into","rs_poker::core","Flatten a `Deck` into a `FlatDeck`.",6,[[["self"]],["flatdeck"]]],[11,"next","","",5,[[["self"]],["option",["vec"]]]],[11,"partial_cmp","","",2,[[["self"],["value"]],["option",["ordering"]]]],[11,"partial_cmp","","",1,[[["self"],["suit"]],["option",["ordering"]]]],[11,"partial_cmp","","",0,[[["self"],["card"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["card"]],["bool"]]],[11,"le","","",0,[[["self"],["card"]],["bool"]]],[11,"gt","","",0,[[["self"],["card"]],["bool"]]],[11,"ge","","",0,[[["self"],["card"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["rank"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["rank"]],["bool"]]],[11,"le","","",3,[[["self"],["rank"]],["bool"]]],[11,"gt","","",3,[[["self"],["rank"]],["bool"]]],[11,"ge","","",3,[[["self"],["rank"]],["bool"]]],[11,"partial_cmp","rs_poker::holdem","",10,[[["self"],["suitedness"]],["option",["ordering"]]]],[11,"partial_cmp","","",11,[[["self"],["startinghand"]],["option",["ordering"]]]],[11,"lt","","",11,[[["self"],["startinghand"]],["bool"]]],[11,"le","","",11,[[["self"],["startinghand"]],["bool"]]],[11,"gt","","",11,[[["self"],["startinghand"]],["bool"]]],[11,"ge","","",11,[[["self"],["startinghand"]],["bool"]]],[11,"eq","rs_poker::core","",2,[[["self"],["value"]],["bool"]]],[11,"eq","","",1,[[["self"],["suit"]],["bool"]]],[11,"eq","","",0,[[["self"],["card"]],["bool"]]],[11,"ne","","",0,[[["self"],["card"]],["bool"]]],[11,"eq","","",4,[[["self"],["hand"]],["bool"]]],[11,"ne","","",4,[[["self"],["hand"]],["bool"]]],[11,"eq","","",3,[[["self"],["rank"]],["bool"]]],[11,"ne","","",3,[[["self"],["rank"]],["bool"]]],[11,"eq","rs_poker::holdem","",10,[[["self"],["suitedness"]],["bool"]]],[11,"eq","","",11,[[["self"],["startinghand"]],["bool"]]],[11,"ne","","",11,[[["self"],["startinghand"]],["bool"]]],[11,"into_iter","rs_poker::core","Consume this deck and create a new iterator.",6,[[["self"]],["intoiter",["card"]]]],[11,"cmp","","",2,[[["self"],["value"]],["ordering"]]],[11,"cmp","","",1,[[["self"],["suit"]],["ordering"]]],[11,"cmp","","",0,[[["self"],["card"]],["ordering"]]],[11,"cmp","","",3,[[["self"],["rank"]],["ordering"]]],[11,"cmp","rs_poker::holdem","",10,[[["self"],["suitedness"]],["ordering"]]],[11,"hash","rs_poker::core","",2,N],[11,"hash","","",1,N],[11,"hash","","",0,N],[11,"hash","","",4,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","rs_poker::holdem","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"index","rs_poker::core","",4,[[["self"],["usize"]],["card"]]],[11,"index","","",4,N],[11,"index","","",4,N],[11,"index","","",4,N],[11,"index","","",7,[[["self"],["usize"]],["card"]]],[11,"index","","",7,N],[11,"index","","",7,N],[11,"index","","",7,N],[11,"index","","",7,N],[11,"rank","","Rank the cards to find the best 5 card hand. This will work on 5 cards or more ( specifically on 7 card holdem hands). If you know that the hand only contains 5 cards then `rank_five` will be faster.",9,[[["self"]],["rank"]]],[11,"rank_five","","Rank this hand. It doesn't do any caching so it's left up to the user to understand that duplicate work will be done if this is called more than once.",9,[[["self"]],["rank"]]]],"paths":[[3,"Card"],[4,"Suit"],[4,"Value"],[4,"Rank"],[3,"Hand"],[3,"CardIter"],[3,"Deck"],[3,"FlatDeck"],[8,"Flattenable"],[8,"Rankable"],[4,"Suitedness"],[4,"StartingHand"],[3,"MonteCarloGame"],[3,"RangeParser"]]};
initSearch(searchIndex);
